package tregression.autofeedback;

import java.util.List;

import microbat.model.trace.Trace;
import microbat.model.trace.TraceNode;
import microbat.model.value.VarValue;
import microbat.recommendation.ChosenVariableOption;
import microbat.recommendation.UserFeedback;

/**
 * RandomFeedbackGenerator is one of the feedback generator and it randomly give feedback
 * @author David
 *
 */
public final class RandomFeedbackGenerator extends FeedbackGenerator {

	public RandomFeedbackGenerator(Trace trace, AutoFeedbackMethods method) {
		super(trace, method);
	}

	/**
	 * Give random feedback for the given trace node.
	 * It will not give UNCLEAR feedback.
	 * It will not give CORRECT feedback to the last trace node, which is assumed to be wrong.
	 */
	@Override
	public UserFeedback giveFeedback(TraceNode node) {
		UserFeedback feedback = new UserFeedback();
		
		// Decide if the trace node correct or not. 
		// If the trace node is the last node in trace,
		// then it should not be correct
		if (node != this.trace.getLatestNode()) {
			if (this.guessIsCorrect()) {
				feedback.setFeedbackType(UserFeedback.CORRECT);
				this.printFeedbackMessage(node, feedback);
				return feedback;
			}
		}
		
		// Now the trace node is wrong
		// Decide if the trace node control incorrect or data incorrect
		// Note that if this trace node do not have any reading variable then it must be control incorrect
		List<VarValue> readVars = node.getReadVariables();
		
		// Do not count the temporary variable generated by java
		readVars = this.removeVarsGenByJava(readVars);
		if (readVars.isEmpty() || this.guessIsControlIncorrect()) {
			feedback.setFeedbackType(UserFeedback.WRONG_PATH);
			this.printFeedbackMessage(node, feedback);
			return feedback;
		}
		
		// Now the step is data incorrect
		// Pick one variable to be wrong
		VarValue wrongVar = this.getRandVar(readVars, false);
		feedback.setFeedbackType(UserFeedback.WRONG_VARIABLE_VALUE);
		ChosenVariableOption option = new ChosenVariableOption(wrongVar, null);
		feedback.setOption(option);
		this.printFeedbackMessage(node, feedback);
		return feedback;
	}
	
	/**
	 * Randomly guess is the statement correct or not
	 * @return True if the statement is correct
	 */
	private boolean guessIsCorrect() {
		return Math.random() > 0.9;
	}
	
	/**
	 * Randomly guess is the statement control incorrect or not
	 * @return True if the statement is control incorrect
	 */
	private boolean guessIsControlIncorrect() {
		return Math.random() > 0.5;
	}

}